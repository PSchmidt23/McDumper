{"version":3,"sources":["firebaseConfig.js","AuthContext.js","pages/WelcomePage.js","components/PhoneAuth.js","components/Dashboard.js","pages/ProfilePage.js","pages/ProfileSetup.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getFirestore","storage","getStorage","AuthContext","createContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","authLoading","setAuthLoading","authError","setAuthError","useEffect","unsubscribeAuth","onAuthStateChanged","async","user","userDocRef","doc","uid","unsubscribeFirestore","onSnapshot","docSnap","exists","data","isNewUser","displayName","trim","email","setDoc","phoneNumber","profilePicture","instagram","createdAt","serverTimestamp","error","console","code","message","React","createElement","Provider","value","WelcomePage","navigate","useNavigate","className","onClick","navigateToSignIn","aria-label","PhoneAuth","useContext","setPhoneNumber","otp","setOtp","confirmationResult","setConfirmationResult","isSendingOtp","setIsSendingOtp","isVerifyingOtp","setIsVerifyingOtp","onSubmit","e","preventDefault","confirm","toast","success","type","placeholder","onChange","target","disabled","window","recaptchaVerifier","RecaptchaVerifier","size","callback","response","log","expired-callback","warn","appVerifier","confirmation","signInWithPhoneNumber","clear","PhoneInput","country","phone","inputStyle","width","countryCodeEditable","id","Dashboard","setDisplayName","setEmail","setInstagram","setProfilePicture","profilePictureURL","setProfilePictureURL","setMessage","userDocSnap","getDoc","fetchUserData","test","profilePictureLink","imageRef","ref","uuidv4","uploadBytes","getDownloadURL","updateDoc","accept","files","Link","to","signOut","ProfilePage","title","FaCog","src","alt","ProfileSetup","isUpdating","setIsUpdating","required","PrivateRoute","Navigate","App","Router","ToastContainer","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.79228e04.chunk.js","sourcesContent":["// src/firebaseConfig.js\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore'; // Import Firestore\nimport { getStorage } from 'firebase/storage';     // Import Storage\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB8w6Hrwq6WsZDrZQz0ZqM-0bnr6geOy2A\",\n    authDomain: \"mcdumper-36b77.firebaseapp.com\",\n    projectId: \"mcdumper-36b77\",\n    storageBucket: \"mcdumper-36b77.appspot.com\",\n    messagingSenderId: \"848104218864\",\n    appId: \"1:848104218864:web:79e96e7acdacec894b2235\"\n  };\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication\nconst auth = getAuth(app);\n\n// Initialize Cloud Firestore\nconst db = getFirestore(app);\n\n// Initialize Firebase Storage\nconst storage = getStorage(app);\n\nexport { auth, db, storage };\n","// src/AuthContext.js\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { auth, db } from './firebaseConfig';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { doc, setDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';\n\n// Create the AuthContext\nexport const AuthContext = createContext();\n\n// Create the AuthProvider component\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [authError, setAuthError] = useState(null); // To handle and display authentication errors\n\n  useEffect(() => {\n    // Listen for authentication state changes\n    const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        const userDocRef = doc(db, 'users', user.uid);\n        try {\n          // Listen to real-time updates on the user document\n          const unsubscribeFirestore = onSnapshot(userDocRef, (docSnap) => {\n            if (docSnap.exists()) {\n              const data = docSnap.data();\n              // Determine if the user is new based on the presence of required profile fields\n              const isNewUser =\n                !data.displayName || data.displayName.trim() === '' ||\n                !data.email || data.email.trim() === '';\n              setCurrentUser({ ...user, ...data, isNewUser });\n            } else {\n              // If the user document doesn't exist, create it\n              const isNewUser = true;\n              setDoc(userDocRef, {\n                uid: user.uid,\n                phoneNumber: user.phoneNumber || '',\n                email: user.email || '',\n                displayName: '',\n                profilePicture: '',\n                instagram: '',\n                createdAt: serverTimestamp(),\n              });\n              setCurrentUser({ ...user, isNewUser });\n            }\n          });\n\n          // Cleanup Firestore listener when auth state changes\n          return () => {\n            unsubscribeFirestore();\n          };\n        } catch (error) {\n          console.error('Error fetching user data:', error.code, error.message);\n          setAuthError(error); // Store the error to display in the UI\n          setCurrentUser(null);\n        } finally {\n          setAuthLoading(false);\n        }\n      } else {\n        setCurrentUser(null);\n        setAuthLoading(false);\n      }\n    });\n\n    // Cleanup auth listener on unmount\n    return () => {\n      unsubscribeAuth();\n    };\n  }, []);\n\n  if (authLoading) {\n    return <p>Loading...</p>; // Optional: Replace with a spinner component for better UX\n  }\n\n  if (authError) {\n    return <p>Error: {authError.message}</p>; // Display error message to the user\n  }\n\n  return (\n    <AuthContext.Provider value={{ currentUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","// src/pages/WelcomePage.js\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/WelcomePage.css'; // Correct import path\n\nconst WelcomePage = () => {\n  const navigate = useNavigate();\n\n  const navigateToSignIn = () => {\n    navigate('/sign-in');\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <h1 className=\"app-title\">McDumper</h1>\n      <div className=\"caption-and-button\">\n        <p className=\"app-caption\">Best Place to Dump</p>\n        <button\n          className=\"get-started-button\"\n          onClick={navigateToSignIn}\n          aria-label=\"Get Started\"\n        >\n          Get Started\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WelcomePage;\n","// src/components/PhoneAuth.js\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { auth } from '../firebaseConfig';\nimport { RecaptchaVerifier, signInWithPhoneNumber } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport '../styles/PhoneAuth.css';\nimport { AuthContext } from '../AuthContext';\nimport { toast } from 'react-toastify'; // Optional: For toast notifications\n\nconst PhoneAuth = () => {\n  const { currentUser } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [otp, setOtp] = useState('');\n  const [confirmationResult, setConfirmationResult] = useState(null);\n  const [isSendingOtp, setIsSendingOtp] = useState(false);\n  const [isVerifyingOtp, setIsVerifyingOtp] = useState(false);\n\n  useEffect(() => {\n    if (currentUser) {\n      if (currentUser.isNewUser) {\n        navigate('/profile-setup');\n      } else {\n        navigate('/profile');\n      }\n    }\n  }, [currentUser, navigate]);\n\n  const setUpRecaptcha = () => {\n    if (!window.recaptchaVerifier) {\n      window.recaptchaVerifier = new RecaptchaVerifier(\n        'recaptcha-container',\n        {\n          size: 'invisible',\n          callback: (response) => {\n            console.log('reCAPTCHA solved');\n          },\n          'expired-callback': () => {\n            console.warn('reCAPTCHA expired');\n          },\n        },\n        auth\n      );\n    }\n  };\n\n  const handleSendOtp = async (e) => {\n    e.preventDefault();\n\n    if (!phoneNumber) {\n      toast.error('Please enter your phone number.');\n      return;\n    }\n\n    setIsSendingOtp(true);\n    setUpRecaptcha();\n    const appVerifier = window.recaptchaVerifier;\n\n    try {\n      console.log('Formatted phone number:', '+' + phoneNumber);\n      const confirmation = await signInWithPhoneNumber(auth, '+' + phoneNumber, appVerifier);\n      setConfirmationResult(confirmation);\n      toast.success('OTP has been sent to your phone.');\n    } catch (error) {\n      console.error('Error during signInWithPhoneNumber', error.code, error.message);\n      toast.error('Failed to send OTP. Please try again.');\n      if (window.recaptchaVerifier) {\n        window.recaptchaVerifier.clear();\n        window.recaptchaVerifier = null;\n      }\n    } finally {\n      setIsSendingOtp(false);\n    }\n  };\n\n  const handleVerifyOtp = async (e) => {\n    e.preventDefault();\n\n    if (!otp) {\n      toast.error('Please enter the OTP.');\n      return;\n    }\n    setIsVerifyingOtp(true);\n    try {\n      await confirmationResult.confirm(otp);\n      toast.success('Phone number verified successfully!');\n      // Navigation is handled by useEffect based on currentUser\n    } catch (error) {\n      console.error('Error verifying OTP', error.code, error.message);\n      toast.error('Invalid OTP. Please try again.');\n    } finally {\n      setIsVerifyingOtp(false);\n    }\n  };\n\n  return (\n    <div className=\"phone-auth-container\">\n      <h2>Sign In / Sign Up</h2>\n      {!confirmationResult ? (\n        <form onSubmit={handleSendOtp} className=\"auth-form\">\n          <PhoneInput\n            country={'us'}\n            value={phoneNumber}\n            onChange={(phone) => setPhoneNumber(phone)}\n            inputStyle={{ width: '100%' }}\n            countryCodeEditable={false}\n            placeholder=\"Enter phone number\"\n          />\n          <button type=\"submit\" disabled={isSendingOtp} className=\"auth-button\">\n            {isSendingOtp ? 'Sending OTP...' : 'Send OTP'}\n          </button>\n        </form>\n      ) : (\n        <form onSubmit={handleVerifyOtp} className=\"auth-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter OTP\"\n            value={otp}\n            onChange={(e) => setOtp(e.target.value)}\n            className=\"otp-input\"\n          />\n          <button type=\"submit\" disabled={isVerifyingOtp} className=\"auth-button\">\n            {isVerifyingOtp ? 'Verifying OTP...' : 'Verify OTP'}\n          </button>\n        </form>\n      )}\n      <div id=\"recaptcha-container\"></div>\n    </div>\n  );\n};\n\nexport default PhoneAuth;\n","// src/components/Dashboard.js\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { auth, db, storage } from '../firebaseConfig';\nimport { signOut } from 'firebase/auth';\nimport { AuthContext } from '../AuthContext';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { doc, updateDoc, getDoc } from 'firebase/firestore';\nimport '../styles/Dashboard.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Dashboard = () => {\n  const { currentUser } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const [displayName, setDisplayName] = useState('');\n  const [email, setEmail] = useState('');\n  const [instagram, setInstagram] = useState('');\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [profilePictureURL, setProfilePictureURL] = useState('');\n  const [message, setMessage] = useState('');\n\n  // Fetch existing user data on component mount\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const userDocRef = doc(db, 'users', currentUser.uid);\n      const userDocSnap = await getDoc(userDocRef);\n      if (userDocSnap.exists()) {\n        const data = userDocSnap.data();\n        setDisplayName(data.displayName || '');\n        setEmail(data.email || '');\n        setInstagram(data.instagram || '');\n        setProfilePictureURL(data.profilePicture || '');\n      }\n    };\n\n    if (currentUser) {\n      fetchUserData();\n    }\n  }, [currentUser]);\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      navigate('/sign-in');\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const handleProfileUpdate = async (e) => {\n    e.preventDefault();\n    setMessage('');\n\n    // Simple validation\n    if (!displayName.trim()) {\n      setMessage('Display Name cannot be empty.');\n      return;\n    }\n\n    if (email && !/\\S+@\\S+\\.\\S+/.test(email)) {\n      setMessage('Please enter a valid email address.');\n      return;\n    }\n\n    try {\n      // Update profile picture if a new one is selected\n      let profilePictureLink = profilePictureURL;\n      if (profilePicture) {\n        const imageRef = ref(storage, `profilePictures/${currentUser.uid}/${uuidv4()}`);\n        await uploadBytes(imageRef, profilePicture);\n        profilePictureLink = await getDownloadURL(imageRef);\n      }\n\n      // Update user document in Firestore\n      const userDocRef = doc(db, 'users', currentUser.uid);\n      await updateDoc(userDocRef, {\n        displayName,\n        email,\n        instagram,\n        profilePicture: profilePictureLink,\n      });\n\n      setMessage('Profile updated successfully!');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      setMessage('Failed to update profile.');\n    }\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <h2>Welcome to Your Dashboard!</h2>\n      {currentUser && (\n        <p>\n          Signed in as: <strong>{currentUser.phoneNumber}</strong>\n        </p>\n      )}\n\n      {message && <p className=\"message\">{message}</p>}\n\n      <form onSubmit={handleProfileUpdate} className=\"profile-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Display Name\"\n          value={displayName}\n          onChange={(e) => setDisplayName(e.target.value)}\n        />\n\n        <input\n          type=\"email\"\n          placeholder=\"Email Address\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n\n        <input\n          type=\"text\"\n          placeholder=\"Instagram Username\"\n          value={instagram}\n          onChange={(e) => setInstagram(e.target.value)}\n        />\n\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            setProfilePicture(e.target.files[0]);\n          }}\n        />\n\n        <button type=\"submit\" className=\"auth-button\">\n          Update Profile\n        </button>\n      </form>\n\n      <Link to={`/profile/${currentUser.uid}`} className=\"profile-link\">\n        View Your Profile\n      </Link>\n\n      <button onClick={handleSignOut} className=\"sign-out-button\">\n        Sign Out\n      </button>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","// src/pages/ProfilePage.js\n\nimport React, { useContext } from 'react';\nimport { AuthContext } from '../AuthContext'; // Ensure the path is correct\nimport { auth } from '../firebaseConfig';\nimport { signOut } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { FaCog } from 'react-icons/fa'; // Using react-icons for the settings icon\nimport '../styles/ProfilePage.css';\nimport { toast } from 'react-toastify'; // Optional: For toast notifications\n\nconst ProfilePage = () => {\n  const { currentUser } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const handleSignOut = async () => {\n    try {\n      await signOut(auth);\n      toast.success('Signed out successfully.');\n      navigate('/sign-in');\n    } catch (error) {\n      console.error('Error signing out:', error.code, error.message);\n      toast.error('Failed to sign out. Please try again.');\n    }\n  };\n\n  if (!currentUser) {\n    return <p>Loading...</p>; // Optional: Replace with a spinner component for better UX\n  }\n\n  return (\n    <div className=\"profile-page-container\">\n      <div className=\"profile-header\">\n        <h2>Your Profile</h2>\n        <button onClick={handleSignOut} className=\"settings-button\" title=\"Settings & Sign Out\">\n          <FaCog size={24} />\n        </button>\n      </div>\n      <div className=\"profile-info\">\n        {currentUser.profilePicture ? (\n          <img src={currentUser.profilePicture} alt=\"Profile\" className=\"profile-picture\" />\n        ) : (\n          <div className=\"profile-picture-placeholder\">No Image</div>\n        )}\n        <p><strong>Name:</strong> {currentUser.displayName || 'N/A'}</p>\n        <p><strong>Phone Number:</strong> {currentUser.phoneNumber || 'N/A'}</p>\n        <p><strong>Email:</strong> {currentUser.email || 'N/A'}</p>\n        <p><strong>Instagram:</strong> {currentUser.instagram || 'N/A'}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage;\n","// src/pages/ProfileSetup.js\n\nimport React, { useState, useContext } from 'react';\nimport { db, storage } from '../firebaseConfig';\nimport { AuthContext } from '../AuthContext';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport '../styles/ProfileSetup.css';\nimport { toast } from 'react-toastify'; // Optional: For toast notifications\n\nconst ProfileSetup = () => {\n  const { currentUser } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const [displayName, setDisplayName] = useState('');\n  const [email, setEmail] = useState('');\n  const [instagram, setInstagram] = useState('');\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const handleProfileSetup = async (e) => {\n    e.preventDefault();\n\n    // Basic validation\n    if (!displayName.trim()) {\n      toast.error('Display Name is required.');\n      return;\n    }\n\n    setIsUpdating(true);\n\n    try {\n      console.log('Starting profile setup...');\n\n      const userDocRef = doc(db, 'users', currentUser.uid);\n\n      let profilePictureLink = currentUser.profilePicture || '';\n\n      if (profilePicture) {\n        const imageRef = ref(storage, `profilePictures/${currentUser.uid}/${uuidv4()}`);\n        await uploadBytes(imageRef, profilePicture);\n        profilePictureLink = await getDownloadURL(imageRef);\n        console.log('Profile picture uploaded:', profilePictureLink);\n      }\n\n      await updateDoc(userDocRef, {\n        displayName,\n        email,\n        instagram,\n        profilePicture: profilePictureLink,\n      });\n\n      console.log('User document updated successfully.');\n\n      toast.success('Profile setup complete!');\n      navigate('/profile'); // Navigate to profile page\n    } catch (error) {\n      console.error('Error setting up profile:', error.code, error.message);\n      toast.error('Failed to set up profile. Please try again.');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <div className=\"profile-setup-container\">\n      <h2>Complete Your Profile</h2>\n      <form onSubmit={handleProfileSetup} className=\"profile-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Display Name\"\n          value={displayName}\n          onChange={(e) => setDisplayName(e.target.value)}\n          required\n        />\n\n        <input\n          type=\"email\"\n          placeholder=\"Email Address\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n\n        <input\n          type=\"text\"\n          placeholder=\"Instagram Username\"\n          value={instagram}\n          onChange={(e) => setInstagram(e.target.value)}\n        />\n\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            setProfilePicture(e.target.files[0]);\n          }}\n        />\n\n        <button type=\"submit\" disabled={isUpdating} className=\"auth-button\">\n          {isUpdating ? 'Processing...' : 'Next'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileSetup;\n","// src/App.js\n\nimport React, { useContext } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, AuthContext } from './AuthContext'; // Ensure the path is correct\nimport WelcomePage from './pages/WelcomePage';\nimport PhoneAuth from './components/PhoneAuth';\nimport Dashboard from './components/Dashboard';\nimport ProfilePage from './pages/ProfilePage';\nimport ProfileSetup from './pages/ProfileSetup'; // Import the new ProfileSetup component\nimport { ToastContainer } from 'react-toastify'; // Optional: For toast notifications\nimport 'react-toastify/dist/ReactToastify.css'; // Optional: Toast styles\n\n// PrivateRoute component to protect routes\nconst PrivateRoute = ({ children }) => {\n  const { currentUser } = useContext(AuthContext);\n  return currentUser ? children : <Navigate to=\"/sign-in\" />;\n};\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <ToastContainer /> {/* Optional: Enables toast notifications */}\n        <Routes>\n          {/* Public Routes */}\n          <Route path=\"/\" element={<WelcomePage />} />\n          <Route path=\"/sign-in\" element={<PhoneAuth />} />\n\n          {/* Protected Routes */}\n          <Route\n            path=\"/dashboard\"\n            element={\n              <PrivateRoute>\n                <Dashboard />\n              </PrivateRoute>\n            }\n          />\n          <Route\n            path=\"/profile-setup\"\n            element={\n              <PrivateRoute>\n                <ProfileSetup />\n              </PrivateRoute>\n            }\n          />\n          <Route\n            path=\"/profile\"\n            element={\n              <PrivateRoute>\n                <ProfilePage />\n              </PrivateRoute>\n            }\n          />\n\n          {/* Catch-All Route */}\n          <Route path=\"*\" element={<Navigate to=\"/\" />} />\n        </Routes>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/global.css'; // Import global styles\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}